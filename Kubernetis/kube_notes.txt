API server
    Autheticate
    Autherize
    validate
    talk to ETCD --> No sql database
        create a pod so it will insert into the table
        dlt remove the pod
        
        only to talk with the ETCD
        ETCD can be only handled with API

Shedular
    when there is a change in the table
    it will come and do the work
    
    data-driven arch

    The master have all the data of the master node ETCD. then the master have can create pod on that the base

controller
    control all the operations


WORKER NODE
    Kubelet --> local manager,this work with the ContainerD or CRIO
    Kube-proxy --> Runs on every worker node and understand the network of every worker node
    ContainerD/CRIO --> something similar to docker


pods -> group of one or more Container 
    all of them are co-located means run in the same node and co-sheduled on the same node
    they share a volume

sudo apt-get install -y kubelet=1.30.10-1.1 kubectl=1.30.10-1.1 kubeadm=1.30.10-1.1
1.30.10-1.1

history
-------
    2  hostnamectl set-hostname kmaster
    3  cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
    4  overlay
    5  br_netfilter
    6  EOF
    7  sudo modprobe overlay
    8  sudo modprobe br_netfilter
    9  cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
   10  net.bridge.bridge-nf-call-iptables  = 1
   11  net.bridge.bridge-nf-call-ip6tables = 1
   12  net.ipv4.ip_forward                 = 1
   13  EOF
   14  sudo sysctl --system
   15  sudo apt-get update -y
   16  sudo apt-get install -y software-properties-common gpg curl apt-transport-https ca-certificates
   17  curl -fsSL https://pkgs.k8s.io/addons:/cri-o:/prerelease:/main/deb/Release.key |     gpg --dearmor -o /etc/apt/keyrings/cri-o-apt-keyring.gpg
   18  echo "deb [signed-by=/etc/apt/keyrings/cri-o-apt-keyring.gpg] https://pkgs.k8s.io/addons:/cri-o:/prerelease:/main/deb/ /" |     tee /etc/apt/sources.list.d/cri-o.list
   19  sudo apt-get update -y
   20  sudo apt-get install -y cri-o
   21  sudo systemctl daemon-reload
   22  sudo systemctl enable crio --now
   23  sudo systemctl start crio.service
   24  sudo systemctl enable crio --now
   25  KUBERNETES_VERSION=1.30
   26  sudo mkdir -p /etc/apt/keyrings
   27  curl -fsSL https://pkgs.k8s.io/core:/stable:/v$KUBERNETES_VERSION/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
   28  echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v$KUBERNETES_VERSION/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
   29  sudo apt-get update -y
   30  apt-cache madison kubeadm | tac
   31  clear
   32  apt-cache madison kubeadm | tac
   33  sudo apt-get install -y kubelet=1.30.10-1.1 kubectl=1.30.10-1.1 kubeadm=1.30.10-1.1
   34  kubeadm init
   35  mkdir -p $HOME/.kube
   36  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
   37  sudo chown $(id -u):$(id -g) $HOME/.kube/config
   38  exit
   39  kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/calico.yaml
   40  watch -n 1 kubectl get nodes
   41  watch -n 1 kubectl get pods -n kube-system
   42  kubectl run akashpod --image=nginx
   43  kubectl get pods
   44  kubectl describe pod akashpod
   45  kubectl describe node kmaster
   46  kubectl describe node kmaster | grep Taint
   47  kubectl taint node kmaster node-role.kubernetes.io/control-plane:NoSchedule-
   48  kubectl get pods